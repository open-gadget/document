{"version":3,"file":"static/js/842.e91a0917.chunk.js","mappings":"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","sources":["offline-settings/db.ts","offline-settings/mdn-worker.tsx","offline-settings/update.tsx","offline-settings/clear.tsx","ui/atoms/spinner/index.tsx","offline-settings/settings.tsx","ui/atoms/switch/index.tsx","../../node_modules/@use-it/interval/dist/index.js","../../node_modules/@use-it/interval/src/index.tsx"],"sourcesContent":["// WARNING - This file is duplicated at two locations:\n// - client/pwa/src/db.ts\n// - client/src/offline-settings/db.ts\n// Until we find a solution, keep both files in sync.\n\nimport Dexie from \"dexie\";\n\nexport interface Watched {\n  url: string;\n  title: string;\n  path: string;\n  status: string;\n}\n\nexport interface Notifications {\n  id: number;\n  title: string;\n  text: string;\n  url: string;\n  created: Date;\n  read: boolean;\n  starred: boolean;\n}\n\ninterface Parent {\n  uri: string;\n  title: string;\n}\n\nexport interface Collections {\n  id?: number;\n  url: string;\n  title: string;\n  parents?: Array<Parent>[];\n  notes?: string;\n  created: Date;\n}\n\nexport interface Whoami {\n  id?: number;\n  username: string;\n  is_authenticated: boolean;\n  email: string;\n  avatar_url: string;\n  is_subscriber: boolean;\n}\n\nexport enum ContentStatusPhase {\n  INITIAL = \"initial\",\n  IDLE = \"idle\",\n  DOWNLOAD = \"download\",\n  UNPACK = \"unpack\",\n  CLEAR = \"clear\",\n}\n\nexport interface LocalContentStatus {\n  version: string;\n  date: string;\n}\n\nexport interface RemoteContentStatus {\n  date: string;\n  latest: string;\n  updates: [string];\n}\n\nexport interface ContentStatus {\n  id?: number;\n  phase: ContentStatusPhase;\n  local: LocalContentStatus | null;\n  remote: RemoteContentStatus | null;\n  progress: number | null;\n  timestamp: Date;\n}\n\nexport class MDNOfflineDB extends Dexie {\n  // Declare implicit table properties.\n  // (just to inform Typescript. Instanciated by Dexie in stores() method)\n  whoami!: Dexie.Table<Whoami, number>; // number = type of the primkey\n  contentStatusHistory!: Dexie.Table<ContentStatus, number>;\n  collections!: Dexie.Table<Collections, string>;\n  watched!: Dexie.Table<Watched, String>;\n  notifications!: Dexie.Table<Notifications, number>;\n\n  constructor() {\n    super(\"MDNOfflineDB\");\n    this.version(1).stores({\n      whoami:\n        \"++, username, is_authenticated, email, avatar_url, is_subscriber\",\n      collections: \"url, title, created\",\n      watched: \"url, title, path\",\n      notifications: \"id, title, text, url, created, read, starred\",\n    });\n    this.version(2).stores({\n      contentStatusHistory: \"++id\",\n    });\n  }\n}\n\nconst offlineDb = new MDNOfflineDB();\n\nasync function getContentStatus(): Promise<ContentStatus> {\n  const current = await offlineDb.contentStatusHistory.toCollection().last();\n\n  return (\n    current || {\n      phase: ContentStatusPhase.INITIAL,\n      local: null,\n      remote: null,\n      progress: null,\n      timestamp: new Date(),\n    }\n  );\n}\n\nasync function patchContentStatus(\n  changes: Omit<Partial<ContentStatus>, \"id\" | \"timestamp\">\n) {\n  const db = offlineDb;\n  const table = db.contentStatusHistory;\n\n  await db.transaction(\"rw\", table, async () => {\n    const oldStatus = await getContentStatus();\n    const newStatus = {\n      ...oldStatus,\n      ...changes,\n      id: undefined,\n      timestamp: new Date(),\n    };\n\n    if (oldStatus.phase === ContentStatusPhase.INITIAL && !changes.phase) {\n      newStatus.phase = ContentStatusPhase.IDLE;\n    }\n\n    if (oldStatus.id && oldStatus.phase === newStatus.phase) {\n      await table.update(oldStatus.id, newStatus);\n    } else {\n      await table.add(newStatus);\n      // Keep latest entries for debugging.\n      await table.reverse().offset(100).delete();\n    }\n  });\n}\n\nexport { offlineDb, getContentStatus, patchContentStatus };\n","import { getContentStatus } from \"./db\";\n\nexport class SettingsData {\n  offline?: boolean;\n  preferOnline?: boolean;\n  autoUpdates?: boolean;\n\n  constructor() {\n    this.offline = false;\n    this.preferOnline = false;\n    this.autoUpdates = false;\n  }\n}\n\nexport class MDNWorker {\n  settings: SettingsData;\n  registered: boolean;\n  timeout?: ReturnType<typeof setTimeout> | null;\n  keepAlive: ReturnType<typeof setInterval> | null;\n\n  constructor() {\n    this.settings = this.offlineSettings();\n    this.registered = false;\n    this.timeout = null;\n    this.keepAlive = null;\n\n    if (this.settings.autoUpdates) {\n      this.autoUpdate();\n    }\n  }\n\n  autoUpdate() {\n    console.log(\"running auto update\");\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n    this.update();\n    this.timeout = setTimeout(() => this.autoUpdate(), 60 * 60 * 1000);\n  }\n\n  async messageHandler(event) {\n    switch (event.data.type) {\n      case \"pong\":\n        console.log(\"pong\");\n        break;\n      default:\n        console.log(\"unknown message\");\n    }\n  }\n\n  controller(): ServiceWorker | null {\n    return navigator.serviceWorker.controller;\n  }\n\n  checkForUpdate(): void {\n    this.controller()?.postMessage({ type: \"checkForUpdate\" });\n  }\n\n  update() {\n    this.controller()?.postMessage({ type: \"update\" });\n  }\n\n  swName(onlineFirst: boolean | null | undefined = null) {\n    const onlineFirstSW = onlineFirst ?? this.settings.preferOnline ?? false;\n    return `/service-worker.js?preferOnline=${onlineFirstSW}`;\n  }\n\n  async enableServiceWorker(onlineFirst: boolean | null | undefined = null) {\n    if (\"serviceWorker\" in navigator) {\n      await navigator.serviceWorker.register(this.swName(onlineFirst), {\n        scope: \"/\",\n      });\n      this.registered = true;\n    }\n    registerMessageHandler();\n  }\n\n  async disableServiceWorker() {\n    if (\"serviceWorker\" in navigator) {\n      const registration = await navigator.serviceWorker.getRegistration();\n      await registration?.unregister();\n      this.registered = false;\n    }\n  }\n\n  toggleKeepAlive(keepAlive: boolean) {\n    if (this.keepAlive && !keepAlive) {\n      console.log(\"[worker] keepalive -> enabling\");\n      clearInterval(this.keepAlive);\n      this.keepAlive = null;\n    } else if (keepAlive && !this.keepAlive) {\n      console.log(\"[worker] keepalive -> disabling\");\n      this.keepAlive = setInterval(\n        () => this.controller()?.postMessage({ type: \"keepalive\" }),\n        10000\n      );\n    }\n  }\n\n  async status() {\n    return await getContentStatus();\n  }\n\n  offlineSettings(): SettingsData {\n    return (\n      JSON.parse(window.localStorage.getItem(\"MDNSettings\") || \"null\") ??\n      new SettingsData()\n    );\n  }\n\n  async setOfflineSettings(settingsData: SettingsData): Promise<SettingsData> {\n    const current = this.offlineSettings();\n\n    if (!current.offline && settingsData.offline && !this.registered) {\n      await this.enableServiceWorker(settingsData.preferOnline);\n    } else if (\n      \"preferOnline\" in settingsData &&\n      current.preferOnline !== settingsData.preferOnline\n    ) {\n      await this.disableServiceWorker();\n      await this.enableServiceWorker(settingsData.preferOnline);\n    }\n    if (current.offline && settingsData.offline === false) {\n      await this.disableServiceWorker();\n    }\n\n    if (settingsData.autoUpdates === false && this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    } else if (\n      settingsData.autoUpdates === true &&\n      current.autoUpdates === false\n    ) {\n      this.autoUpdate();\n    }\n\n    const settings = { ...current, ...settingsData };\n    window.localStorage.setItem(\"MDNSettings\", JSON.stringify(settings));\n    this.settings = settings;\n    return settings;\n  }\n  async clear() {\n    this.controller()?.postMessage({ type: \"clear\" });\n  }\n}\n\ndeclare global {\n  interface Window {\n    mdnWorker: MDNWorker;\n  }\n}\n\nexport function getMDNWorker(): MDNWorker {\n  if (!window.mdnWorker) {\n    window.mdnWorker = new MDNWorker();\n  }\n  return window.mdnWorker;\n}\n\nconst mdnWorker = getMDNWorker();\n\nfunction registerMessageHandler() {\n  navigator.serviceWorker.addEventListener(\"message\", mdnWorker.messageHandler);\n}\n\nif (mdnWorker.settings.offline) {\n  mdnWorker.enableServiceWorker(mdnWorker.settings.preferOnline);\n}\n","import { ContentStatus, ContentStatusPhase } from \"./db\";\n\nexport default function UpdateButton({\n  updateStatus,\n  update,\n  disabled = false,\n}: {\n  updateStatus: ContentStatus | null;\n  update: () => void;\n  disabled?: boolean;\n}) {\n  const current =\n    updateStatus?.local?.date &&\n    `Last updated: ${Intl.DateTimeFormat([], { dateStyle: \"medium\" }).format(\n      Date.parse(updateStatus?.local?.date)\n    )}`;\n  let button: JSX.Element | null = null;\n  let info: string | undefined;\n\n  switch (updateStatus?.phase) {\n    case ContentStatusPhase.INITIAL:\n      info = \"Checking for updates\";\n      break;\n\n    case ContentStatusPhase.IDLE:\n      if (updateStatus?.local?.version === updateStatus?.remote?.latest) {\n        info = \"Your content is up to date\";\n        button = <button disabled>Up to date</button>;\n      } else {\n        if (updateStatus?.local) {\n          info = \"Update available\";\n          button = (\n            <button className=\"button\" onClick={update} disabled={disabled}>\n              {\" \"}\n              Update now\n            </button>\n          );\n        } else {\n          info =\n            \"Start using MDN Offline by downloading the latest version of MDN Web Docs\";\n          button = (\n            <button className=\"button\" onClick={update} disabled={disabled}>\n              {\" \"}\n              Download\n            </button>\n          );\n        }\n      }\n      break;\n\n    case ContentStatusPhase.DOWNLOAD:\n      if (updateStatus?.local) {\n        info = \"Update in progress…\";\n      } else {\n        info = \"Download in progress…\";\n      }\n      button = <button disabled={disabled}>Downloading…</button>;\n      break;\n\n    case ContentStatusPhase.UNPACK:\n      if (updateStatus?.local) {\n        info = \"Update in progress…\";\n      } else {\n        info = \"Download in progress…\";\n      }\n      const progress = (updateStatus?.progress || 0) * 100;\n      button = (\n        <button disabled={disabled}>\n          Unpacking…{\" \"}\n          {progress?.toLocaleString(undefined, {\n            maximumFractionDigits: 0,\n          })}\n          %\n        </button>\n      );\n      break;\n\n    case ContentStatusPhase.CLEAR:\n      info = \"Clearing…\";\n      break;\n  }\n\n  return (\n    <>\n      <h4>Update status</h4>\n      <span>\n        {current}\n        <br />\n        {info}\n      </span>\n      {button}\n    </>\n  );\n}\n","import { ContentStatus, ContentStatusPhase } from \"./db\";\n\nexport default function ClearButton({\n  updateStatus,\n  clear,\n  disabled = false,\n}: {\n  updateStatus: ContentStatus | null;\n  clear: () => void;\n  disabled?: boolean;\n}) {\n  let button;\n  if (updateStatus?.phase === ContentStatusPhase.IDLE && updateStatus?.local) {\n    button = (\n      <button className=\"button\" onClick={clear} disabled={disabled}>\n        Clear data\n      </button>\n    );\n  } else if (updateStatus?.phase === ContentStatusPhase.CLEAR) {\n    button = <button disabled>Clearing…</button>;\n  } else {\n    button = (\n      <button className=\"button\" disabled>\n        Clear data\n      </button>\n    );\n  }\n\n  return <>{button}</>;\n}\n","import \"./index.scss\";\n\nexport function Spinner({ extraClasses }: { extraClasses?: string | null }) {\n  return (\n    <div className={`spinner ${extraClasses || \"\"}`}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n}\n","import { Switch } from \"../ui/atoms/switch\";\nimport { SettingsData, getMDNWorker } from \"./mdn-worker\";\nimport useInterval from \"@use-it/interval\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport UpdateButton from \"./update\";\nimport ClearButton from \"./clear\";\nimport { Spinner } from \"../ui/atoms/spinner\";\nimport { MDN_PLUS_TITLE } from \"../constants\";\nimport { ContentStatus, ContentStatusPhase } from \"./db\";\n\nfunction displayEstimate({ usage = 0, quota = Infinity }: StorageEstimate) {\n  const usageInMib = Math.round(usage / (1024 * 1024));\n\n  return `${usageInMib} MiB`;\n}\n\nexport default function SettingsApp({ ...appProps }) {\n  const serviceWorkerAvailable = window?.navigator?.serviceWorker;\n\n  return (\n    <section className=\"field-group\">\n      {/* <h3>MDN Offline</h3> */}\n      {serviceWorkerAvailable ? (\n        <Settings />\n      ) : (\n        <>\n          <h4>Offline mode is unavailable </h4>{\" \"}\n          <p>\n            Please make sure that you are not using a private or incognito\n            window.\n          </p>\n        </>\n      )}\n    </section>\n  );\n}\n\nfunction Settings() {\n  document.title = `MDN Offline | ${MDN_PLUS_TITLE}`;\n  const [status, setStatus] = useState<ContentStatus>();\n  const [saving, setSaving] = useState<boolean>(true);\n\n  const [estimate, setEstimate] = useState<StorageEstimate | null>(null);\n  const [settings, setSettings] = useState<SettingsData>();\n  // Workaround to avoid \"Error: Too many re-renders.\" (https://github.com/mdn/yari/pull/5744).\n  const updateTriggered = useRef(false);\n\n  useEffect(() => {\n    const init = async () => {\n      const mdnWorker = getMDNWorker();\n      setSettings(await mdnWorker.offlineSettings());\n      setEstimate(await navigator?.storage?.estimate?.());\n      mdnWorker.checkForUpdate();\n    };\n    init().then(() => {});\n  }, []);\n  useEffect(() => {\n    const init = async () => {\n      setSaving(false);\n    };\n    init();\n  }, [settings]);\n\n  useEffect(() => {\n    const mdnWorker = getMDNWorker();\n    const isWorkerBusy = status?.phase\n      ? status?.phase !== ContentStatusPhase.IDLE\n      : false;\n    mdnWorker.toggleKeepAlive(isWorkerBusy);\n\n    if (isWorkerBusy) {\n      // Warn when leaving page.\n      const listener = (e) => {\n        e.preventDefault();\n        e.returnValue = \"\";\n      };\n      window.addEventListener(\"beforeunload\", listener);\n\n      return () => window.removeEventListener(\"beforeunload\", listener);\n    }\n  }, [status?.phase]);\n\n  const updateSettings = async (change: SettingsData) => {\n    setSaving(true);\n    const mdnWorker = getMDNWorker();\n    let newSettings = await mdnWorker.setOfflineSettings(change);\n    setSettings(newSettings);\n  };\n\n  useInterval(async () => {\n    const mdnWorker = getMDNWorker();\n    const next = await mdnWorker.status();\n    setStatus({ ...next });\n  }, 500);\n\n  const update = () => {\n    const mdnWorker = getMDNWorker();\n    mdnWorker.update();\n    setStatus(status);\n  };\n\n  const clear = async () => {\n    if (\n      window.confirm(\"All downloaded content will be removed from your device\")\n    ) {\n      const mdnWorker = getMDNWorker();\n      mdnWorker.clear();\n      setStatus(status);\n    }\n  };\n\n  if (\n    settings?.autoUpdates &&\n    status?.remote?.latest !== status?.local?.version &&\n    !updateTriggered.current\n  ) {\n    update();\n    updateTriggered.current = true;\n  }\n\n  const usage = estimate && displayEstimate(estimate);\n\n  return (\n    <ul>\n      <li>\n        <h4>Enable offline storage</h4>\n        <span>Allow MDN content to be downloaded for offline access</span>\n        {(saving === true && <Spinner extraClasses=\"loading\" />) || (\n          <Switch\n            name=\"offline\"\n            checked={settings?.offline || false}\n            toggle={(e) =>\n              updateSettings({\n                offline: e.target.checked,\n              })\n            }\n          ></Switch>\n        )}\n      </li>\n      {settings?.offline && (\n        <>\n          <li>\n            <h4>Prefer online content</h4>\n            <span>\n              Do not use offline content while connected to the internet\n            </span>\n            {(saving === true && <Spinner extraClasses=\"loading\" />) || (\n              <Switch\n                name=\"prefer-online\"\n                checked={settings?.preferOnline || false}\n                toggle={(e) =>\n                  updateSettings({\n                    preferOnline: e.target.checked,\n                  })\n                }\n              ></Switch>\n            )}\n          </li>\n          <li>\n            <UpdateButton\n              disabled={saving}\n              updateStatus={status || null}\n              update={update}\n            />\n          </li>\n          <li>\n            <h4>Enable auto-update</h4>\n            <span>\n              Automatically download updates to content enabled for download\n            </span>\n            {(saving === true && <Spinner extraClasses=\"loading\" />) || (\n              <Switch\n                name=\"auto-update\"\n                checked={settings?.autoUpdates || false}\n                toggle={(e) =>\n                  updateSettings({\n                    autoUpdates: e.target.checked,\n                  })\n                }\n              ></Switch>\n            )}\n          </li>\n          {window?.location.hash === \"#debug\" && (\n            <li>\n              <h4>Debug</h4>\n              <span style={{ fontFamily: \"monospace\", whiteSpace: \"pre\" }}>\n                {JSON.stringify(status, null, 2)}\n              </span>\n            </li>\n          )}\n          {usage && (\n            <li>\n              <h4>Storage used</h4>\n              <span>\n                MDN Offline currently uses <b>{usage}</b>\n              </span>\n            </li>\n          )}\n          <li>\n            <ClearButton\n              disabled={saving}\n              updateStatus={status || null}\n              clear={clear}\n            />\n          </li>\n        </>\n      )}\n    </ul>\n  );\n}\n","import \"./index.scss\";\n\nexport function Switch({\n  name,\n  hiddenLabel,\n  checked = false,\n  toggle = () => {},\n  children,\n}: {\n  name: string;\n  hiddenLabel?: string;\n  checked?: boolean;\n  toggle?: (Event) => void;\n  children?: React.ReactNode;\n}) {\n  return (\n    <label className=\"switch\">\n      {hiddenLabel && <span className=\"visually-hidden\">{hiddenLabel}</span>}\n      <input\n        type=\"checkbox\"\n        name={name}\n        checked={checked}\n        onChange={toggle}\n      ></input>\n      <span className=\"slider\"></span>\n      {children && <span className=\"label\">{children}</span>}\n    </label>\n  );\n}\n","\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./interval.cjs.production.min.js')\n} else {\n  module.exports = require('./interval.cjs.development.js')\n}\n","import { useEffect, useRef } from 'react';\n\ntype Delay = number | null;\ntype TimerHandler = (...args: any[]) => void;\n\nconst useInterval = (callback: TimerHandler, delay: Delay) => {\n  const savedCallbackRef = useRef<TimerHandler>();\n\n  useEffect(() => {\n    savedCallbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const handler = (...args: any[]) => savedCallbackRef.current!(...args);\n\n    if (delay !== null) {\n      const intervalId = setInterval(handler, delay);\n      return () => clearInterval(intervalId);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n"],"names":["ContentStatusPhase","offlineDb","whoami","contentStatusHistory","collections","watched","notifications","version","stores","Dexie","getContentStatus","toCollection","last","current","phase","INITIAL","local","remote","progress","timestamp","Date","SettingsData","offline","preferOnline","autoUpdates","this","MDNWorker","settings","registered","timeout","keepAlive","offlineSettings","autoUpdate","console","log","clearTimeout","update","setTimeout","event","data","type","navigator","serviceWorker","controller","postMessage","onlineFirst","onlineFirstSW","register","swName","scope","registerMessageHandler","getRegistration","registration","unregister","clearInterval","setInterval","JSON","parse","window","localStorage","getItem","settingsData","enableServiceWorker","disableServiceWorker","setItem","stringify","getMDNWorker","mdnWorker","addEventListener","messageHandler","UpdateButton","info","updateStatus","disabled","date","Intl","DateTimeFormat","dateStyle","format","button","latest","className","onClick","toLocaleString","undefined","maximumFractionDigits","ClearButton","clear","Spinner","extraClasses","SettingsApp","serviceWorkerAvailable","Settings","document","title","MDN_PLUS_TITLE","useState","status","setStatus","saving","setSaving","estimate","setEstimate","setSettings","updateTriggered","useRef","useEffect","init","storage","checkForUpdate","then","isWorkerBusy","toggleKeepAlive","listener","e","preventDefault","returnValue","removeEventListener","updateSettings","change","setOfflineSettings","newSettings","useInterval","next","confirm","usage","usageInMib","quota","Math","round","displayEstimate","name","checked","toggle","target","location","hash","style","fontFamily","whiteSpace","Switch","hiddenLabel","children","onChange","module","exports","callback","delay","savedCallbackRef","intervalId"],"sourceRoot":""}