{"version":3,"file":"static/js/browser-compatibility-table.58ccb889.chunk.js","mappings":"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","sources":["document/ingredients/browser-compatibility-table/browser-info.tsx","document/ingredients/browser-compatibility-table/error-boundary.tsx","document/ingredients/browser-compatibility-table/utils.ts","document/ingredients/browser-compatibility-table/legend.tsx","document/ingredients/browser-compatibility-table/feature-row.tsx","document/ingredients/browser-compatibility-table/headers.tsx","document/ingredients/browser-compatibility-table/index.tsx"],"sourcesContent":["import React, { useContext } from \"react\";\nimport type BCD from \"@mdn/browser-compat-data/types\";\n\nexport const BrowserInfoContext = React.createContext<BCD.Browsers | null>(\n  null\n);\n\nexport function BrowserName({ id }: { id: BCD.BrowserName }) {\n  const browserInfo = useContext(BrowserInfoContext);\n  if (!browserInfo) {\n    throw new Error(\"Missing browser info\");\n  }\n  return <>{browserInfo[id].name}</>;\n}\n","import React from \"react\";\n\n/**\n * The error boundary for BrowserCompatibilityTable.\n *\n * When the whole BrowserCompatibilityTable crashes, for whatever reason,\n * this component will show a friendly message\n * to replace that crashed component\n */\nexport class BrowserCompatibilityErrorBoundary extends React.Component<\n  any,\n  any\n> {\n  state = {\n    error: null,\n  };\n  componentDidCatch(error, _errorInfo) {\n    this.setState({\n      error,\n    });\n    // TODO: Report this error to Sentry, https://github.com/mdn/yari/issues/99\n  }\n  render() {\n    if (this.state.error) {\n      return (\n        <>\n          <div className=\"bc-table-error-boundary\">\n            Unfortunately, this table has encountered unhandled error and the\n            content cannot be shown.\n            {/* TODO: When error reporting is set up, the message should include \"We have been notified of this error\" or something similar */}\n          </div>\n        </>\n      );\n    }\n    return this.props.children;\n  }\n}\n","import type BCD from \"@mdn/browser-compat-data/types\";\n\n// Extended for the fields, beyond the bcd types, that are extra-added\n// exclusively in Yari.\ninterface SimpleSupportStatementExtended extends BCD.SimpleSupportStatement {\n  // Known for some support statements where the browser *version* is known,\n  // as opposed to just \"true\" and if the version release date is known.\n  release_date?: string;\n}\n\nexport type SupportStatementExtended =\n  | SimpleSupportStatementExtended\n  | SimpleSupportStatementExtended[];\n\nexport function getFirst<T>(a: T | T[]): T;\nexport function getFirst<T>(a: T | T[] | undefined): T | undefined {\n  return Array.isArray(a) ? a[0] : a;\n}\n\nexport function asList<T>(a: T | T[]): T[] {\n  return Array.isArray(a) ? a : [a];\n}\n\nexport function isTruthy<T>(t: T | false | undefined | null): t is T {\n  return Boolean(t);\n}\n\ninterface Feature {\n  name: string;\n  compat: BCD.CompatStatement;\n  depth: number;\n}\n\nexport function listFeatures(\n  identifier: BCD.Identifier,\n  parentName: string = \"\",\n  rootName: string = \"\",\n  depth: number = 0\n): Feature[] {\n  const features: Feature[] = [];\n  if (rootName && identifier.__compat) {\n    features.push({\n      name: rootName,\n      compat: identifier.__compat,\n      depth,\n    });\n  }\n\n  for (const [subName, subIdentifier] of Object.entries(identifier)) {\n    if (subName !== \"__compat\" && (subIdentifier as BCD.Identifier).__compat) {\n      features.push({\n        name: parentName ? `${parentName}.${subName}` : subName,\n        compat: (subIdentifier as BCD.Identifier).__compat!,\n        depth: depth + 1,\n      });\n      features.push(\n        ...listFeatures(subIdentifier as BCD.Identifier, subName, \"\", depth + 1)\n      );\n    }\n  }\n  return features;\n}\n\nexport function versionIsPreview(\n  version: BCD.VersionValue | string | undefined,\n  browser: BCD.BrowserStatement\n): boolean {\n  if (version === \"preview\") {\n    return true;\n  }\n\n  if (browser && typeof version === \"string\" && browser.releases[version]) {\n    return [\"beta\", \"nightly\", \"planned\"].includes(\n      browser.releases[version].status\n    );\n  }\n\n  return false;\n}\n\nexport function hasNoteworthyNotes(support: BCD.SimpleSupportStatement) {\n  return (\n    support.notes?.length &&\n    !support.version_removed &&\n    !support.partial_implementation\n  );\n}\n\nfunction hasLimitation(support: BCD.SimpleSupportStatement) {\n  return hasMajorLimitation(support) || support.notes;\n}\n\nfunction hasMajorLimitation(support: BCD.SimpleSupportStatement) {\n  return (\n    support.partial_implementation ||\n    support.alternative_name ||\n    support.flags ||\n    support.prefix ||\n    support.version_removed\n  );\n}\n\nexport function isOnlySupportedWithAltName(\n  support: BCD.SupportStatement | undefined\n) {\n  return (\n    support &&\n    getFirst(support).alternative_name &&\n    !asList(support).some((item) => isFullySupportedWithoutLimitation(item))\n  );\n}\n\nexport function isOnlySupportedWithPrefix(\n  support: BCD.SupportStatement | undefined\n) {\n  return (\n    support &&\n    getFirst(support).prefix &&\n    !asList(support).some((item) => isFullySupportedWithoutLimitation(item))\n  );\n}\n\nexport function isOnlySupportedWithFlags(\n  support: BCD.SupportStatement | undefined\n) {\n  return (\n    support &&\n    getFirst(support).flags &&\n    !asList(support).some((item) => isFullySupportedWithoutLimitation(item))\n  );\n}\n\nexport function isFullySupportedWithoutLimitation(\n  support: BCD.SimpleSupportStatement\n) {\n  return support.version_added && !hasLimitation(support);\n}\n\nexport function isNotSupportedAtAll(support: BCD.SimpleSupportStatement) {\n  return !support.version_added && !hasLimitation(support);\n}\n\nfunction isFullySupportedWithoutMajorLimitation(\n  support: BCD.SimpleSupportStatement\n) {\n  return support.version_added && !hasMajorLimitation(support);\n}\n\n// Prioritizes support items\nexport function getCurrentSupport(\n  support: SupportStatementExtended | undefined\n): SimpleSupportStatementExtended | undefined {\n  if (!support) return undefined;\n\n  // Full support without limitation\n  const noLimitationSupportItem = asList(support).find((item) =>\n    isFullySupportedWithoutLimitation(item)\n  );\n  if (noLimitationSupportItem) return noLimitationSupportItem;\n\n  // Full support with only notes and version_added\n  const minorLimitationSupportItem = asList(support).find((item) =>\n    isFullySupportedWithoutMajorLimitation(item)\n  );\n  if (minorLimitationSupportItem) return minorLimitationSupportItem;\n\n  // Full support with altname/prefix\n  const altnamePrefixSupportItem = asList(support).find(\n    (item) => !item.version_removed && (item.prefix || item.alternative_name)\n  );\n  if (altnamePrefixSupportItem) return altnamePrefixSupportItem;\n\n  // Partial support\n  const partialSupportItem = asList(support).find(\n    (item) => !item.version_removed && item.partial_implementation\n  );\n  if (partialSupportItem) return partialSupportItem;\n\n  // Support with flags only\n  const flagSupportItem = asList(support).find(\n    (item) => !item.version_removed && item.flags\n  );\n  if (flagSupportItem) return flagSupportItem;\n\n  // No/Inactive support\n  const noSupportItem = asList(support).find((item) => item.version_removed);\n  if (noSupportItem) return noSupportItem;\n\n  // Default (likely never reached)\n  return getFirst(support);\n}\n","import { useContext } from \"react\";\nimport type BCD from \"@mdn/browser-compat-data/types\";\nimport { BrowserInfoContext } from \"./browser-info\";\nimport {\n  asList,\n  getFirst,\n  hasNoteworthyNotes,\n  listFeatures,\n  versionIsPreview,\n} from \"./utils\";\n\n// Also specifies the order in which the legend appears\nexport const LEGEND_LABELS = {\n  yes: \"Full support\",\n  partial: \"Partial support\",\n  preview: \"In development. Supported in a pre-release version.\",\n  no: \"No support\",\n  unknown: \"Compatibility unknown\",\n  experimental: \"Experimental. Expect behavior to change in the future.\",\n  nonstandard: \"Non-standard. Check cross-browser support before using.\",\n  deprecated: \"Deprecated. Not for use in new websites.\",\n  footnote: \"See implementation notes.\",\n  disabled: \"User must explicitly enable this feature.\",\n  altname: \"Uses a non-standard name.\",\n  prefix: \"Requires a vendor prefix or different name for use.\",\n};\ntype LEGEND_KEY = keyof typeof LEGEND_LABELS;\n\nfunction getActiveLegendItems(\n  compat: BCD.Identifier,\n  name: string,\n  browserInfo: BCD.Browsers\n) {\n  const legendItems = new Set<LEGEND_KEY>();\n\n  for (const feature of listFeatures(compat, \"\", name)) {\n    const { status } = feature.compat;\n\n    if (status) {\n      if (status.experimental) {\n        legendItems.add(\"experimental\");\n      }\n      if (status.deprecated) {\n        legendItems.add(\"deprecated\");\n      }\n      if (!status.standard_track) {\n        legendItems.add(\"nonstandard\");\n      }\n    }\n\n    for (const [browser, browserSupport] of Object.entries(\n      feature.compat.support\n    )) {\n      if (!browserSupport) {\n        legendItems.add(\"no\");\n        continue;\n      }\n      const firstSupportItem = getFirst(browserSupport);\n      if (hasNoteworthyNotes(firstSupportItem)) {\n        legendItems.add(\"footnote\");\n      }\n\n      for (const versionSupport of asList(browserSupport)) {\n        if (versionSupport.version_added) {\n          if (versionSupport.flags && versionSupport.flags.length) {\n            legendItems.add(\"no\");\n          } else if (\n            versionIsPreview(versionSupport.version_added, browserInfo[browser])\n          ) {\n            legendItems.add(\"preview\");\n          } else {\n            legendItems.add(\"yes\");\n          }\n        } else if (versionSupport.version_added == null) {\n          legendItems.add(\"unknown\");\n        } else {\n          legendItems.add(\"no\");\n        }\n\n        if (versionSupport.partial_implementation) {\n          legendItems.add(\"partial\");\n        }\n        if (versionSupport.prefix) {\n          legendItems.add(\"prefix\");\n        }\n        if (versionSupport.alternative_name) {\n          legendItems.add(\"altname\");\n        }\n        if (versionSupport.flags) {\n          legendItems.add(\"disabled\");\n        }\n      }\n    }\n  }\n  return Object.keys(LEGEND_LABELS)\n    .filter((key) => legendItems.has(key as LEGEND_KEY))\n    .map((key) => [key, LEGEND_LABELS[key]]);\n}\n\nexport function Legend({\n  compat,\n  name,\n}: {\n  compat: BCD.Identifier;\n  name: string;\n}) {\n  const browserInfo = useContext(BrowserInfoContext);\n\n  if (!browserInfo) {\n    throw new Error(\"Missing browser info\");\n  }\n\n  return (\n    <section className=\"bc-legend\">\n      <h3 className=\"visually-hidden\" id=\"Legend\">\n        Legend\n      </h3>\n      <dl className=\"bc-legend-items-container\">\n        {getActiveLegendItems(compat, name, browserInfo).map(([key, label]) =>\n          [\"yes\", \"partial\", \"no\", \"unknown\", \"preview\"].includes(key) ? (\n            <div className=\"bc-legend-item\" key={key}>\n              <dt className=\"bc-legend-item-dt\" key={key}>\n                <span className={`bc-supports-${key} bc-supports`}>\n                  <abbr\n                    className={`bc-level bc-level-${key} icon icon-${key}`}\n                    title={label}\n                  >\n                    <span className=\"visually-hidden\">{label}</span>\n                  </abbr>\n                </span>\n              </dt>\n              <dd className=\"bc-legend-item-dd\">{label}</dd>\n            </div>\n          ) : (\n            <div className=\"bc-legend-item\" key={key}>\n              <dt className=\"bc-legend-item-dt\">\n                <abbr\n                  className={`legend-icons icon icon-${key}`}\n                  title={label}\n                ></abbr>\n              </dt>\n              <dd className=\"bc-legend-item-dd\">{label}</dd>\n            </div>\n          )\n        )}\n      </dl>\n    </section>\n  );\n}\n","import React, { useContext } from \"react\";\nimport type BCD from \"@mdn/browser-compat-data/types\";\nimport { BrowserInfoContext } from \"./browser-info\";\nimport {\n  asList,\n  getCurrentSupport,\n  hasNoteworthyNotes,\n  isFullySupportedWithoutLimitation,\n  isNotSupportedAtAll,\n  isOnlySupportedWithAltName,\n  isOnlySupportedWithFlags,\n  isOnlySupportedWithPrefix,\n  isTruthy,\n  versionIsPreview,\n  SupportStatementExtended,\n} from \"./utils\";\nimport { LEGEND_LABELS } from \"./legend\";\n\n// Yari builder will attach extra keys from the compat data\n// it gets from @mdn/browser-compat-data. These are \"Yari'esque\"\n// extras that helps us avoiding to have a separate data structure.\ninterface CompatStatementExtended extends BCD.CompatStatement {\n  // When a compat statement has a .mdn_url but it's actually not a good\n  // one, the Yari builder will attach an extra boolean that indicates\n  // that it's not a valid link.\n  // Note, it's only 'true' if it's present, hence this interface definition.\n  bad_url?: true;\n}\n\nfunction getSupportClassName(\n  support: SupportStatementExtended | undefined,\n  browser: BCD.BrowserStatement\n): \"no\" | \"yes\" | \"partial\" | \"preview\" | \"removed-partial\" | \"unknown\" {\n  if (!support) {\n    return \"unknown\";\n  }\n\n  let { flags, version_added, version_removed, partial_implementation } =\n    getCurrentSupport(support)!;\n\n  let className;\n  if (version_added === null) {\n    className = \"unknown\";\n  } else if (versionIsPreview(version_added, browser)) {\n    className = \"preview\";\n  } else if (version_added) {\n    className = \"yes\";\n    if (version_removed || (flags && flags.length)) {\n      className = \"no\";\n    }\n  } else {\n    className = \"no\";\n  }\n  if (partial_implementation) {\n    className = version_removed ? \"removed-partial\" : \"partial\";\n  }\n\n  return className;\n}\n\nfunction getSupportBrowserReleaseDate(\n  support: SupportStatementExtended | undefined\n): string | undefined {\n  if (!support) {\n    return undefined;\n  }\n  return getCurrentSupport(support)!.release_date;\n}\n\nfunction StatusIcons({ status }: { status: BCD.StatusBlock }) {\n  const icons = [\n    status.experimental && {\n      title: \"Experimental. Expect behavior to change in the future.\",\n      text: \"Experimental\",\n      iconClassName: \"icon-experimental\",\n    },\n    status.deprecated && {\n      title: \"Deprecated. Not for use in new websites.\",\n      text: \"Deprecated\",\n      iconClassName: \"icon-deprecated\",\n    },\n    !status.standard_track && {\n      title: \"Non-standard. Expect poor cross-browser support.\",\n      text: \"Non-standard\",\n      iconClassName: \"icon-nonstandard\",\n    },\n  ].filter(isTruthy);\n  return icons.length === 0 ? null : (\n    <div className=\"bc-icons\" data-test={icons.length}>\n      {icons.map((icon) => (\n        <abbr\n          key={icon.iconClassName}\n          className={`only-icon icon ${icon.iconClassName}`}\n          title={icon.title}\n        >\n          <span>{icon.text}</span>\n        </abbr>\n      ))}\n    </div>\n  );\n}\n\nfunction labelFromString(\n  version: string | boolean | null | undefined,\n  browser: BCD.BrowserStatement\n) {\n  if (typeof version !== \"string\") {\n    return <>{\"?\"}</>;\n  }\n  // Treat BCD ranges as exact versions to avoid confusion for the reader\n  // See https://github.com/mdn/yari/issues/3238\n  if (version.startsWith(\"≤\")) {\n    return <>{version.slice(1)}</>;\n  }\n  if (version === \"preview\") {\n    return browser.preview_name;\n  }\n  return <>{version}</>;\n}\n\nfunction versionLabelFromSupport(\n  added: string | boolean | null | undefined,\n  removed: string | boolean | null | undefined,\n  browser: BCD.BrowserStatement\n) {\n  if (typeof removed !== \"string\") {\n    return <>{labelFromString(added, browser)}</>;\n  }\n  return (\n    <>\n      {labelFromString(added, browser)}&#8202;&ndash;&#8202;\n      {labelFromString(removed, browser)}\n    </>\n  );\n}\n\nconst CellText = React.memo(\n  ({\n    support,\n    browser,\n    timeline = false,\n  }: {\n    support: BCD.SupportStatement | undefined;\n    browser: BCD.BrowserStatement;\n    timeline?: boolean;\n  }) => {\n    const currentSupport = getCurrentSupport(support);\n\n    const added = currentSupport?.version_added ?? null;\n    const removed = currentSupport?.version_removed ?? null;\n\n    const browserReleaseDate = getSupportBrowserReleaseDate(support);\n    const supportClassName = getSupportClassName(support, browser);\n\n    let status:\n      | { isSupported: \"unknown\" }\n      | {\n          isSupported: \"no\" | \"yes\" | \"partial\" | \"preview\" | \"removed-partial\";\n          label?: React.ReactNode;\n        };\n    switch (added) {\n      case null:\n        status = { isSupported: \"unknown\" };\n        break;\n      case true:\n        status = { isSupported: \"yes\" };\n        break;\n      case false:\n        status = { isSupported: \"no\" };\n        break;\n      case \"preview\":\n        status = { isSupported: \"preview\" };\n        break;\n      default:\n        status = {\n          isSupported: supportClassName,\n          label: versionLabelFromSupport(added, removed, browser),\n        };\n        break;\n    }\n\n    let label: string | React.ReactNode;\n    let title = \"\";\n    switch (status.isSupported) {\n      case \"yes\":\n        title = \"Full support\";\n        label = status.label || \"Yes\";\n        break;\n\n      case \"partial\":\n        title = \"Partial support\";\n        label = status.label || \"Partial\";\n        break;\n\n      case \"removed-partial\":\n        if (timeline) {\n          title = \"Partial support\";\n          label = status.label || \"Partial\";\n        } else {\n          title = \"No support\";\n          label = status.label || \"No\";\n        }\n        break;\n\n      case \"no\":\n        title = \"No support\";\n        label = status.label || \"No\";\n        break;\n\n      case \"preview\":\n        title = \"Preview browser support\";\n        label = status.label || browser.preview_name;\n        break;\n\n      case \"unknown\":\n        title = \"Compatibility unknown; please update this.\";\n        label = \"?\";\n        break;\n    }\n\n    return (\n      <div className=\"bcd-cell-text-wrapper\">\n        <div className=\"bcd-cell-icons\">\n          <span className=\"icon-wrap\">\n            <abbr\n              className={`\n              bc-level-${supportClassName}\n              icon\n              icon-${supportClassName}`}\n              title={title}\n            >\n              <span className=\"bc-support-level\">{title}</span>\n            </abbr>\n          </span>\n        </div>\n        <div className=\"bcd-cell-text-copy\">\n          <span className=\"bc-browser-name\">{browser.name}</span>\n          <span\n            className=\"bc-version-label\"\n            title={\n              browserReleaseDate ? `Released ${browserReleaseDate}` : undefined\n            }\n          >\n            {label}\n          </span>\n        </div>\n        <CellIcons support={support} />\n      </div>\n    );\n  }\n);\n\nfunction Icon({ name }: { name: string }) {\n  const title = LEGEND_LABELS[name] ?? name;\n\n  return (\n    <abbr className=\"only-icon\" title={title}>\n      <span>{name}</span>\n      <i className={`icon icon-${name}`} />\n    </abbr>\n  );\n}\n\nfunction CellIcons({ support }: { support: BCD.SupportStatement | undefined }) {\n  const supportItem = getCurrentSupport(support);\n  if (!supportItem) {\n    return null;\n  }\n\n  const icons = [\n    isOnlySupportedWithPrefix(support) && <Icon key=\"prefix\" name=\"prefix\" />,\n    hasNoteworthyNotes(supportItem) && <Icon key=\"footnote\" name=\"footnote\" />,\n    isOnlySupportedWithAltName(support) && (\n      <Icon key=\"altname\" name=\"altname\" />\n    ),\n    isOnlySupportedWithFlags(support) && (\n      <Icon key=\"disabled\" name=\"disabled\" />\n    ),\n  ].filter(Boolean);\n\n  return icons.length ? <div className=\"bc-icons\">{icons}</div> : null;\n}\n\nfunction FlagsNote({\n  supportItem,\n  browser,\n}: {\n  supportItem: BCD.SimpleSupportStatement;\n  browser: BCD.BrowserStatement;\n}) {\n  const hasAddedVersion = typeof supportItem.version_added === \"string\";\n  const hasRemovedVersion = typeof supportItem.version_removed === \"string\";\n  const flags = supportItem.flags || [];\n  return (\n    <>\n      {hasAddedVersion && `From version ${supportItem.version_added}`}\n      {hasRemovedVersion && (\n        <>\n          {hasAddedVersion ? \" until\" : \"Until\"} version{\" \"}\n          {supportItem.version_removed} (exclusive)\n        </>\n      )}\n      {hasAddedVersion || hasRemovedVersion ? \": this\" : \"This\"} feature is\n      behind the\n      {flags.map((flag, i) => {\n        const valueToSet = flag.value_to_set && (\n          <>\n            {\" \"}\n            (needs to be set to <code>{flag.value_to_set}</code>)\n          </>\n        );\n        return (\n          <React.Fragment key={flag.name}>\n            <code>{flag.name}</code>\n            {flag.type === \"preference\" && <> preferences{valueToSet}</>}\n            {flag.type === \"runtime_flag\" && <> runtime flag{valueToSet}</>}\n            {i < flags.length - 1 && \" and the \"}\n          </React.Fragment>\n        );\n      })}\n      .\n      {browser.pref_url &&\n        flags.some((flag) => flag.type === \"preference\") &&\n        ` To change preferences in ${browser.name}, visit ${browser.pref_url}.`}\n    </>\n  );\n}\n\nfunction getNotes(\n  browser: BCD.BrowserStatement,\n  support: BCD.SupportStatement\n) {\n  if (support) {\n    return asList(support)\n      .slice()\n      .reverse()\n      .flatMap((item, i) => {\n        const supportNotes = [\n          item.version_removed &&\n          !asList(support).some(\n            (otherItem) => otherItem.version_added === item.version_removed\n          )\n            ? {\n                iconName: \"disabled\",\n                label: (\n                  <>\n                    Removed in {labelFromString(item.version_removed, browser)}{\" \"}\n                    and later\n                  </>\n                ),\n              }\n            : null,\n          item.partial_implementation\n            ? {\n                iconName: \"footnote\",\n                label: \"Partial support\",\n              }\n            : null,\n          item.prefix\n            ? {\n                iconName: \"prefix\",\n                label: `Implemented with the vendor prefix: ${item.prefix}`,\n              }\n            : null,\n          item.alternative_name\n            ? {\n                iconName: \"altname\",\n                label: `Alternate name: ${item.alternative_name}`,\n              }\n            : null,\n          item.flags\n            ? {\n                iconName: \"disabled\",\n                label: <FlagsNote browser={browser} supportItem={item} />,\n              }\n            : null,\n          item.notes\n            ? (Array.isArray(item.notes) ? item.notes : [item.notes]).map(\n                (note) => ({ iconName: \"footnote\", label: note })\n              )\n            : null,\n          versionIsPreview(item.version_added, browser)\n            ? {\n                iconName: \"footnote\",\n                label: \"Preview browser support\",\n              }\n            : null,\n          // If we encounter nothing else than the required `version_added` and\n          // `release_date` properties, assume full support.\n          // EDIT 1-5-21: if item.version_added doesn't exist, assume no support.\n          isFullySupportedWithoutLimitation(item) &&\n          !versionIsPreview(item.version_added, browser)\n            ? {\n                iconName: \"footnote\",\n                label: \"Full support\",\n              }\n            : isNotSupportedAtAll(item)\n            ? {\n                iconName: \"footnote\",\n                label: \"No support\",\n              }\n            : null,\n        ]\n          .flat()\n          .filter(isTruthy);\n\n        const hasNotes = supportNotes.length > 0;\n        return (\n          (i === 0 || hasNotes) && (\n            <React.Fragment key={i}>\n              <div className=\"bc-notes-wrapper\">\n                <dt\n                  className={`bc-supports-${getSupportClassName(\n                    item,\n                    browser\n                  )} bc-supports`}\n                >\n                  <CellText support={item} browser={browser} timeline={true} />\n                </dt>\n                {supportNotes.map(({ iconName, label }, i) => {\n                  return (\n                    <dd className=\"bc-supports-dd\" key={i}>\n                      <Icon name={iconName} />{\" \"}\n                      {typeof label === \"string\" ? (\n                        <span dangerouslySetInnerHTML={{ __html: label }} />\n                      ) : (\n                        label\n                      )}\n                    </dd>\n                  );\n                })}\n                {!hasNotes && <dd />}\n              </div>\n            </React.Fragment>\n          )\n        );\n      })\n      .filter(isTruthy);\n  }\n}\n\nfunction CompatCell({\n  browserId,\n  browserInfo,\n  support,\n  showNotes,\n  onToggle,\n  locale,\n}: {\n  browserId: BCD.BrowserName;\n  browserInfo: BCD.BrowserStatement;\n  support: BCD.SupportStatement | undefined;\n  showNotes: boolean;\n  onToggle: () => void;\n  locale: string;\n}) {\n  const supportClassName = getSupportClassName(support, browserInfo);\n  // NOTE: 1-5-21, I've forced hasNotes to return true, in order to\n  // make the details view open all the time.\n  // Whenever the support statement is complex (array with more than one entry)\n  // or if a single entry is complex (prefix, notes, etc.),\n  // we need to render support details in `bc-history`\n  // const hasNotes =\n  //   support &&\n  //   (asList(support).length > 1 ||\n  //     asList(support).some(\n  //       (item) =>\n  //         item.prefix || item.notes || item.alternative_name || item.flags\n  //     ));\n  const notes = getNotes(browserInfo, support!);\n  const content = (\n    <>\n      <CellText {...{ support }} browser={browserInfo} />\n      {showNotes && (\n        <dl className=\"bc-notes-list bc-history bc-history-mobile\">{notes}</dl>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      <td\n        className={`bc-support bc-browser-${browserId} bc-supports-${supportClassName} ${\n          notes ? \"bc-has-history\" : \"\"\n        }`}\n        aria-expanded={showNotes ? \"true\" : \"false\"}\n        onClick={notes ? () => onToggle() : undefined}\n      >\n        <button type=\"button\" disabled={!notes} title=\"Toggle history\">\n          {content}\n          <span className=\"offscreen\">Toggle history</span>\n        </button>\n      </td>\n    </>\n  );\n}\n\nexport const FeatureRow = React.memo(\n  ({\n    index,\n    feature,\n    browsers,\n    activeCell,\n    onToggleCell,\n    locale,\n  }: {\n    index: number;\n    feature: {\n      name: string;\n      compat: CompatStatementExtended;\n      depth: number;\n    };\n    browsers: BCD.BrowserName[];\n    activeCell: number | null;\n    onToggleCell: ([row, column]: [number, number]) => void;\n    locale: string;\n  }) => {\n    const browserInfo = useContext(BrowserInfoContext);\n\n    if (!browserInfo) {\n      throw new Error(\"Missing browser info\");\n    }\n\n    const { name, compat, depth } = feature;\n    const title = compat.description ? (\n      <span dangerouslySetInnerHTML={{ __html: compat.description }} />\n    ) : (\n      <code>{name}</code>\n    );\n    const activeBrowser = activeCell !== null ? browsers[activeCell] : null;\n\n    let titleNode: string | React.ReactNode;\n\n    if (compat.bad_url && compat.mdn_url) {\n      titleNode = (\n        <div className=\"bc-table-row-header\">\n          <abbr className=\"new\" title={`${compat.mdn_url} does not exist`}>\n            {title}\n          </abbr>\n          {compat.status && <StatusIcons status={compat.status} />}\n        </div>\n      );\n    } else if (compat.mdn_url && depth > 0) {\n      titleNode = (\n        <a href={compat.mdn_url} className=\"bc-table-row-header\">\n          {title}\n          {compat.status && <StatusIcons status={compat.status} />}\n        </a>\n      );\n    } else {\n      titleNode = (\n        <div className=\"bc-table-row-header\">\n          {title}\n          {compat.status && <StatusIcons status={compat.status} />}\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <tr>\n          <th className={`bc-feature bc-feature-depth-${depth}`} scope=\"row\">\n            {titleNode}\n          </th>\n          {browsers.map((browser, i) => (\n            <CompatCell\n              key={browser}\n              browserId={browser}\n              browserInfo={browserInfo[browser]}\n              support={compat.support[browser]}\n              showNotes={activeCell === i}\n              onToggle={() => onToggleCell([index, i])}\n              locale={locale}\n            />\n          ))}\n        </tr>\n        {activeBrowser && (\n          <tr className=\"bc-history bc-history-desktop\">\n            <td colSpan={browsers.length + 1}>\n              <dl className=\"bc-notes-list\">\n                {getNotes(\n                  browserInfo[activeBrowser],\n                  compat.support[activeBrowser]!\n                )}\n              </dl>\n            </td>\n          </tr>\n        )}\n      </>\n    );\n  }\n);\n","import bcd from \"@mdn/browser-compat-data\";\nimport { BrowserName } from \"./browser-info\";\n\nfunction PlatformHeaders({ platforms, browsers }) {\n  return (\n    <tr className=\"bc-platforms\">\n      <td />\n      {platforms.map((platform) => {\n        // Get the intersection of browsers in the `browsers` array and the\n        // `PLATFORM_BROWSERS[platform]`.\n        const browsersInPlatform = browsers.filter(\n          (browser) => bcd.browsers[browser].type === platform\n        );\n        const browserCount = browsersInPlatform.length;\n        return (\n          <th\n            key={platform}\n            className={`bc-platform bc-platform-${platform}`}\n            colSpan={browserCount}\n            title={platform}\n          >\n            <span className={`icon icon-${platform}`}></span>\n            <span className=\"visually-hidden\">{platform}</span>\n          </th>\n        );\n      })}\n    </tr>\n  );\n}\n\nfunction BrowserHeaders({ browsers }: { browsers }) {\n  return (\n    <tr className=\"bc-browsers\">\n      <td />\n      {browsers.map((browser) => {\n        const browserStart = browser.split(\"_\")[0];\n        const browserIcon =\n          browserStart === \"firefox\" ? \"simple-firefox\" : browserStart;\n        return (\n          <th key={browser} className={`bc-browser bc-browser-${browser}`}>\n            <div className={`bc-head-txt-label bc-head-icon-${browser}`}>\n              <BrowserName id={browser} />\n            </div>\n            <div\n              className={`bc-head-icon-symbol icon icon-${browserIcon}`}\n            ></div>\n          </th>\n        );\n      })}\n    </tr>\n  );\n}\n\nexport function Headers({ platforms, browsers }) {\n  return (\n    <thead>\n      <PlatformHeaders platforms={platforms} browsers={browsers} />\n      <BrowserHeaders browsers={browsers} />\n    </thead>\n  );\n}\n","import React, { useReducer } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport bcd from \"@mdn/browser-compat-data\";\nimport type BCD from \"@mdn/browser-compat-data/types\";\nimport { BrowserInfoContext } from \"./browser-info\";\nimport { BrowserCompatibilityErrorBoundary } from \"./error-boundary\";\nimport { FeatureRow } from \"./feature-row\";\nimport { Headers } from \"./headers\";\nimport { Legend } from \"./legend\";\nimport { listFeatures } from \"./utils\";\n\n// Note! Don't import any SCSS here inside *this* component.\n// It's done in the component that lazy-loads this component.\n\n// This string is used to prefill the body when clicking to file a new BCD\n// issue over on github.com/mdn/browser-compat-data\nconst ISSUE_METADATA_TEMPLATE = `\n<!-- Do not make changes below this line -->\n<details>\n<summary>MDN page report details</summary>\n\n* Query: \\`$QUERY_ID\\`\n* Report started: $DATE\n\n</details>\n`;\n\n/**\n * Return a list of platforms and browsers that are relevant for this category &\n * data.\n *\n * If the category is \"webextensions\", only those are shown. In all other cases\n * at least the entirety of the \"desktop\" and \"mobile\" platforms are shown. If\n * the category is JavaScript, the entirety of the \"server\" category is also\n * shown. In all other categories, if compat data has info about Deno / Node.js\n * those are also shown. Deno is always shown if Node.js is shown.\n */\nfunction gatherPlatformsAndBrowsers(\n  category: string,\n  data: BCD.Identifier\n): [string[], BCD.BrowserName[]] {\n  const hasNodeJSData = data.__compat && \"nodejs\" in data.__compat.support;\n  const hasDenoData = data.__compat && \"deno\" in data.__compat.support;\n\n  let platforms = [\"desktop\", \"mobile\"];\n  if (category === \"javascript\" || hasNodeJSData || hasDenoData) {\n    platforms.push(\"server\");\n  }\n\n  let browsers: BCD.BrowserName[] = [];\n\n  // Add browsers in platform order to align table cells\n  for (const platform of platforms) {\n    browsers.push(\n      ...(Object.keys(bcd.browsers).filter(\n        (browser) => bcd.browsers[browser].type === platform\n      ) as BCD.BrowserName[])\n    );\n  }\n\n  // Filter WebExtension browsers in corresponding tables.\n  if (category === \"webextensions\") {\n    browsers = browsers.filter(\n      (browser) => bcd.browsers[browser].accepts_webextensions\n    );\n  }\n\n  // If there is no Node.js data for a category outside of \"javascript\", don't\n  // show it. It ended up in the browser list because there is data for Deno.\n  if (category !== \"javascript\" && !hasNodeJSData) {\n    browsers = browsers.filter((browser) => browser !== \"nodejs\");\n  }\n\n  return [platforms, [...browsers]];\n}\n\ntype CellIndex = [number, number];\n\nfunction FeatureListAccordion({\n  features,\n  browsers,\n  locale,\n}: {\n  features: ReturnType<typeof listFeatures>;\n  browsers: BCD.BrowserName[];\n  locale: string;\n}) {\n  const [[activeRow, activeColumn], dispatchCellToggle] = useReducer<\n    React.Reducer<CellIndex | [null, null], CellIndex>\n  >(\n    ([activeRow, activeColumn], [row, column]) =>\n      activeRow === row && activeColumn === column\n        ? [null, null]\n        : [row, column],\n    [null, null]\n  );\n\n  return (\n    <>\n      {features.map((feature, i) => (\n        <FeatureRow\n          key={i}\n          {...{ feature, browsers }}\n          index={i}\n          activeCell={activeRow === i ? activeColumn : null}\n          onToggleCell={([row, column]: [number, number]) => {\n            dispatchCellToggle([row, column]);\n          }}\n          locale={locale}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default function BrowserCompatibilityTable({\n  query,\n  data,\n  browsers: browserInfo,\n  locale,\n}: {\n  query: string;\n  data: BCD.Identifier;\n  browsers: BCD.Browsers;\n  locale: string;\n}) {\n  const location = useLocation();\n\n  if (!data || !Object.keys(data).length) {\n    throw new Error(\n      \"BrowserCompatibilityTable component called with empty data\"\n    );\n  }\n\n  const breadcrumbs = query.split(\".\");\n  const category = breadcrumbs[0];\n  const name = breadcrumbs[breadcrumbs.length - 1];\n\n  const [platforms, browsers] = gatherPlatformsAndBrowsers(category, data);\n\n  function getNewIssueURL() {\n    const url = \"https://github.com/mdn/browser-compat-data/issues/new\";\n    const sp = new URLSearchParams();\n    const metadata = ISSUE_METADATA_TEMPLATE.replace(\n      /\\$DATE/g,\n      new Date().toISOString()\n    )\n      .replace(/\\$QUERY_ID/g, query)\n      .trim();\n    sp.set(\"mdn-url\", `https://developer.mozilla.org${location.pathname}`);\n    sp.set(\"metadata\", metadata);\n    sp.set(\"title\", `${query} - <SUMMARIZE THE PROBLEM>`);\n    sp.set(\"template\", \"data-problem.yml\");\n    return `${url}?${sp.toString()}`;\n  }\n\n  return (\n    <BrowserCompatibilityErrorBoundary>\n      <BrowserInfoContext.Provider value={browserInfo}>\n        <a\n          className=\"bc-github-link external external-icon\"\n          href={getNewIssueURL()}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          title=\"Report an issue with this compatibility data\"\n        >\n          Report problems with this compatibility data on GitHub\n        </a>\n        <div className=\"table-scroll\">\n          <div className=\"table-scroll-inner\">\n            <table key=\"bc-table\" className=\"bc-table bc-table-web\">\n              <Headers {...{ platforms, browsers }} />\n              <tbody>\n                <FeatureListAccordion\n                  browsers={browsers}\n                  features={listFeatures(data, \"\", name)}\n                  locale={locale}\n                />\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <Legend compat={data} name={name} />\n\n        {/* https://github.com/mdn/yari/issues/1191 */}\n        <div className=\"hidden\">\n          The compatibility table on this page is generated from structured\n          data. If you'd like to contribute to the data, please check out{\" \"}\n          <a href=\"https://github.com/mdn/browser-compat-data\">\n            https://github.com/mdn/browser-compat-data\n          </a>{\" \"}\n          and send us a pull request.\n        </div>\n      </BrowserInfoContext.Provider>\n    </BrowserCompatibilityErrorBoundary>\n  );\n}\n"],"names":["BrowserInfoContext","React","BrowserName","id","browserInfo","useContext","Error","name","BrowserCompatibilityErrorBoundary","state","error","_errorInfo","this","setState","className","props","children","getFirst","a","Array","isArray","asList","isTruthy","t","Boolean","listFeatures","identifier","parentName","rootName","depth","features","__compat","push","compat","Object","entries","subName","subIdentifier","versionIsPreview","version","browser","releases","includes","status","hasNoteworthyNotes","support","notes","length","version_removed","partial_implementation","hasLimitation","hasMajorLimitation","alternative_name","flags","prefix","isOnlySupportedWithAltName","some","item","isFullySupportedWithoutLimitation","isOnlySupportedWithPrefix","isOnlySupportedWithFlags","version_added","isNotSupportedAtAll","getCurrentSupport","noLimitationSupportItem","find","minorLimitationSupportItem","isFullySupportedWithoutMajorLimitation","altnamePrefixSupportItem","partialSupportItem","flagSupportItem","noSupportItem","LEGEND_LABELS","yes","partial","preview","no","unknown","experimental","nonstandard","deprecated","footnote","disabled","altname","getActiveLegendItems","legendItems","Set","feature","add","standard_track","browserSupport","versionSupport","keys","filter","key","has","map","Legend","label","title","getSupportClassName","StatusIcons","icons","text","iconClassName","icon","labelFromString","startsWith","slice","preview_name","versionLabelFromSupport","added","removed","CellText","timeline","currentSupport","browserReleaseDate","release_date","getSupportBrowserReleaseDate","supportClassName","isSupported","undefined","CellIcons","Icon","supportItem","FlagsNote","hasAddedVersion","hasRemovedVersion","flag","i","valueToSet","value_to_set","type","pref_url","getNotes","reverse","flatMap","supportNotes","otherItem","iconName","note","flat","hasNotes","dangerouslySetInnerHTML","__html","CompatCell","browserId","showNotes","onToggle","locale","content","onClick","FeatureRow","index","browsers","activeCell","onToggleCell","titleNode","description","activeBrowser","bad_url","mdn_url","href","scope","colSpan","PlatformHeaders","platforms","platform","browserCount","bcd","BrowserHeaders","browserStart","split","browserIcon","Headers","FeatureListAccordion","useReducer","activeRow","activeColumn","row","column","dispatchCellToggle","BrowserCompatibilityTable","query","data","location","useLocation","breadcrumbs","category","hasNodeJSData","hasDenoData","accepts_webextensions","gatherPlatformsAndBrowsers","Provider","value","sp","URLSearchParams","metadata","replace","Date","toISOString","trim","set","pathname","toString","getNewIssueURL","target","rel"],"sourceRoot":""}