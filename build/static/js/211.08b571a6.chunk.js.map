{"version":3,"file":"static/js/211.08b571a6.chunk.js","mappings":"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","sources":["flaw-utils.js","flaws/index.tsx"],"sourcesContent":["/**\n * This file serves to help flaws when displayed one at a time and when\n * displayed in batches.\n *\n */\n\nexport function humanizeFlawName(name) {\n  const verboseNames = {\n    // List all the names that can't be nicely computed by the fallback()\n    // function.\n    bad_bcd_queries: \"Bad BCD queries\",\n    bad_bcd_links: \"Bad BCD links\",\n    bad_pre_tags: \"Bad <pre> tags\",\n    unsafe_html: \"Unsafe HTML\",\n  };\n  function fallback() {\n    return name.charAt(0).toUpperCase() + name.slice(1).replace(/_/g, \" \");\n  }\n  return verboseNames[name] || fallback();\n}\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  createSearchParams,\n  Link,\n  useParams,\n  useSearchParams,\n} from \"react-router-dom\";\nimport useSWR from \"swr\";\n\nimport \"./index.scss\";\n\nimport { humanizeFlawName } from \"../flaw-utils\";\nimport { PageContentContainer } from \"../ui/atoms/page-content\";\n\ninterface DocumentPopularity {\n  value: number;\n  ranking: number;\n}\n\ninterface DocumentFlaws {\n  name: string;\n  value: number | string;\n  countFixable: number;\n}\ninterface Document {\n  mdn_url: string;\n  modified: string;\n  title: string;\n  popularity: DocumentPopularity;\n  flaws: DocumentFlaws[];\n}\n\ntype Count = { [key: string]: number };\n\ninterface FlawsCounts {\n  total: number;\n  fixable: number;\n  type: Count;\n  macros: Count;\n}\n\ninterface Counts {\n  found: number;\n  built: number;\n  pages: number;\n  flaws: FlawsCounts;\n}\n\ninterface Times {\n  built: number;\n}\n\ninterface FlawLevel {\n  name: string;\n  level: string;\n  ignored: boolean;\n}\n\ninterface Data {\n  counts: Counts;\n  documents: Document[];\n  times: Times;\n  flawLevels: FlawLevel[];\n}\n\ninterface Filters {\n  mdn_url: string;\n  title: string;\n  popularity: string;\n  fixableFlaws: string;\n  flaws: string[];\n  page: number;\n  sort_by: string;\n  sort_reverse: boolean;\n  search_flaws: string[];\n}\n\nconst defaultFilters: Filters = Object.freeze({\n  mdn_url: \"\",\n  title: \"\",\n  popularity: \"\",\n  fixableFlaws: \"\",\n  flaws: [],\n  page: 1,\n  sort_by: \"popularity\",\n  sort_reverse: false,\n  search_flaws: [],\n});\n\nfunction withoutDefaultFilters(filters: Filters): Partial<Filters> {\n  return Object.fromEntries(\n    Object.entries(filters).filter(\n      ([key, value]) =>\n        JSON.stringify(defaultFilters[key]) !== JSON.stringify(value)\n    )\n  );\n}\n\n/**\n * Returns an array where\n * first element is the currently set (or default) filters\n * second element is a function to update a given set of partial filters.\n * NOTE: This only changes the given filters, and doesn't reset what is missing\n */\nfunction useFiltersURL(): [Filters, (filters: Partial<Filters>) => void] {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  function groupParamsByKey(params: URLSearchParams): any {\n    return [...params.entries()].reduce((acc, tuple) => {\n      // getting the key and value from each tuple\n      const [key, val] = tuple;\n      if (Object.prototype.hasOwnProperty.call(acc, key)) {\n        // if the current key is already an array, we'll add the value to it\n        if (Array.isArray(acc[key])) {\n          acc[key] = [...acc[key], val];\n        } else {\n          // if it's not an array, but contains a value, we'll convert it into an array\n          // and add the current value to it\n          acc[key] = [acc[key], val];\n        }\n      } else {\n        // plain assignment if no special case is present\n        acc[key] = val;\n      }\n      return acc;\n    }, {});\n  }\n\n  const filters = useMemo(() => {\n    const searchParamsObject = groupParamsByKey(searchParams);\n    if (searchParamsObject.page) {\n      searchParamsObject.page = parseInt(searchParamsObject.page);\n    }\n    return { ...defaultFilters, ...searchParamsObject };\n  }, [searchParams]);\n\n  const updateFiltersURL = useCallback(\n    (partialFilters: Partial<Filters>) => {\n      const newSearchParams = withoutDefaultFilters({\n        ...filters,\n        ...partialFilters,\n      }) as Record<string, string | string[]>;\n      setSearchParams(newSearchParams);\n    },\n    [filters, setSearchParams]\n  );\n\n  const mustBeArrayKeys = [\"flaws\", \"search_flaws\"];\n  for (const key of mustBeArrayKeys) {\n    if (filters[key] && !Array.isArray(filters[key])) {\n      filters[key] = [filters[key]];\n    }\n  }\n\n  return [filters, updateFiltersURL];\n}\n\nexport default function AllFlaws() {\n  const { locale = \"en-US\" } = useParams();\n  const [filters] = useFiltersURL();\n  const [lastData, setLastData] = useState<Data | null>(null);\n\n  useEffect(() => {\n    let title = \"Documents with flaws\";\n    if (lastData) {\n      title = `(${lastData.counts.found.toLocaleString()} found) ${title}`;\n    }\n    document.title = title;\n  }, [lastData]);\n\n  const getAPIUrl = useCallback(() => {\n    const { sort_by, sort_reverse, page, ...restFilters } = filters;\n    const params = createSearchParams({\n      ...restFilters,\n      page: String(page),\n      locale,\n      sort: sort_by,\n      reverse: JSON.stringify(sort_reverse),\n    });\n    return `/_flaws?${params.toString()}`;\n  }, [locale, filters]);\n\n  const { data, error, isValidating } = useSWR<Data, Error>(\n    getAPIUrl(),\n    async (url) => {\n      let response;\n      try {\n        response = await fetch(url);\n      } catch (ex) {\n        throw ex;\n      }\n      if (!response.ok) {\n        throw new Error(`${response.status} on ${url}`);\n      }\n      if (!response.headers.get(\"content-type\").includes(\"application/json\")) {\n        throw new Error(\n          `Response is not JSON (${response.headers.get(\"content-type\")})`\n        );\n      }\n      // Always return a promise!\n      return response.json();\n    },\n    {\n      // revalidateOnFocus: false\n    }\n  );\n\n  useEffect(() => {\n    if (data) {\n      setLastData(data);\n    }\n  }, [data]);\n\n  // XXX there's something weird about this logic\n  let loading: React.ReactNode = <small>&nbsp;</small>;\n  if (!data && !error) {\n    if (lastData) {\n      loading = <small>Reloading...</small>;\n    } else {\n      loading = <small>Loading...</small>;\n    }\n  } else if (isValidating) {\n    loading = <small>Reloading...</small>;\n  }\n\n  const { page } = filters;\n  const pageCount = lastData ? lastData.counts.pages : 0;\n  return (\n    <div className=\"all-flaws\">\n      <PageContentContainer>\n        {loading}\n        {error && <ShowSearchError error={error} />}\n        {lastData && (\n          <div className=\"filter-documents\">\n            <FilterControls flawLevels={lastData.flawLevels} />\n            <DocumentsTable\n              locale={locale}\n              counts={lastData.counts}\n              documents={lastData.documents}\n            />\n            {pageCount > 1 && (\n              <p className=\"pagination\">\n                <PageLink number={1} disabled={page === 1}>\n                  First page\n                </PageLink>{\" \"}\n                {page > 2 && (\n                  <PageLink number={page - 1}>\n                    Previous page ({page - 1})\n                  </PageLink>\n                )}{\" \"}\n                <PageLink number={page + 1} disabled={page + 1 > pageCount}>\n                  Next page ({page + 1})\n                </PageLink>\n              </p>\n            )}\n          </div>\n        )}\n        {data && data.counts && <AllFlawCounts counts={data.counts.flaws} />}\n        {data && <BuildTimes times={data.times} />}\n      </PageContentContainer>\n    </div>\n  );\n}\n\nfunction ShowSearchError({ error }) {\n  return (\n    <div className=\"error-message search-error\">\n      <h3>Search error</h3>\n      <pre>{error.toString()}</pre>\n    </div>\n  );\n}\n\nfunction BuildTimes({ times }: { times: Times }) {\n  function format(ms: number) {\n    if (ms > 1000) {\n      const s = ms / 1000;\n      return `${s.toFixed(1)} seconds`;\n    } else {\n      return `${Math.trunc(ms)} milliseconds`;\n    }\n  }\n  return (\n    <div className=\"search-times\">\n      <p>Time to find built documents {format(times.built)}</p>\n    </div>\n  );\n}\n\ninterface SearchFlawRow {\n  flaw: string;\n  search: string;\n}\n\nfunction serializeSearchFlaws(rows: SearchFlawRow[]) {\n  return rows.map((row) => `${row.flaw}:${row.search}`);\n}\n\nfunction deserializeSearchFlaws(list: string[]) {\n  const rows: SearchFlawRow[] = [];\n  for (const row of list) {\n    const [flaw, search] = row.split(\":\", 2);\n    rows.push({ flaw, search });\n  }\n  return rows;\n}\n\nfunction FilterControls({ flawLevels }: { flawLevels: FlawLevel[] }) {\n  const [initialFilters, updateFiltersURL] = useFiltersURL();\n  const [filters, setFilters] = useState(initialFilters);\n  const [searchFlawsRows, setSearchFlawsRows] = useState<SearchFlawRow[]>(\n    deserializeSearchFlaws(initialFilters.search_flaws)\n  );\n\n  useEffect(() => {\n    // A little convenience DOM trick to put focus on the search input\n    // after you've added a row or used the <select>\n    const searchInputs = [\n      ...document.querySelectorAll<HTMLInputElement>(\n        'ul.search-flaws-rows input[type=\"search\"]'\n      ),\n    ].filter((input) => !input.value);\n    if (searchInputs.length) {\n      searchInputs[searchInputs.length - 1].focus();\n    }\n  }, [searchFlawsRows]);\n\n  function refreshFilters() {\n    updateFiltersURL(filters);\n  }\n\n  let hasFilters = !equalObjects(defaultFilters, filters);\n\n  let hasEmptySearchFlawsRow = searchFlawsRows.some(\n    (row) => !row.search.trim()\n  );\n\n  function resetFilters(event: React.MouseEvent) {\n    event.preventDefault();\n    setFilters(defaultFilters);\n    updateFiltersURL(defaultFilters);\n  }\n\n  return (\n    <div className=\"filters\">\n      <h3>Filters</h3>\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          refreshFilters();\n        }}\n      >\n        <div>\n          <h4>Document</h4>\n          <input\n            type=\"search\"\n            placeholder=\"Filter by document URI\"\n            value={filters.mdn_url}\n            onChange={(event) => {\n              setFilters({ ...filters, mdn_url: event.target.value });\n            }}\n            onBlur={refreshFilters}\n          />\n          <input\n            type=\"search\"\n            placeholder=\"Filter by document title\"\n            value={filters.title}\n            onChange={(event) => {\n              setFilters({ ...filters, title: event.target.value });\n            }}\n            onBlur={refreshFilters}\n          />\n        </div>\n\n        <div>\n          <h4>Popularity</h4>\n          <input\n            type=\"search\"\n            placeholder=\"E.g. < 100\"\n            value={filters.popularity || \"\"}\n            onChange={(event) => {\n              setFilters({ ...filters, popularity: event.target.value });\n            }}\n            onBlur={refreshFilters}\n          />\n        </div>\n        <div>\n          <h4>Flaws</h4>\n          <select\n            multiple={true}\n            value={filters.flaws}\n            onChange={(event) => {\n              const flaws = [...event.target.selectedOptions].map(\n                (opt) => opt.value\n              );\n              setFilters({ ...filters, flaws });\n            }}\n          >\n            {flawLevels &&\n              flawLevels.map((flawLevel) => {\n                return (\n                  <option key={flawLevel.name} value={flawLevel.name}>\n                    {humanizeFlawName(flawLevel.name)}{\" \"}\n                    {flawLevel.ignored && \"(ignored)\"}\n                  </option>\n                );\n              })}\n          </select>\n        </div>\n        <div>\n          <h4>Search inside flaws</h4>\n          <ul className=\"search-flaws-rows\">\n            {searchFlawsRows.map((row, i) => {\n              return (\n                <li key={`${row.flaw}:${i}`}>\n                  <select\n                    value={row.flaw}\n                    onChange={(event) => {\n                      const clone = [...searchFlawsRows];\n                      clone[i].flaw = event.target.value;\n                      setSearchFlawsRows(clone);\n                    }}\n                  >\n                    {flawLevels &&\n                      flawLevels\n                        .filter((flawLevel) => !flawLevel.ignored)\n                        .map((flawLevel) => {\n                          return (\n                            <option key={flawLevel.name} value={flawLevel.name}>\n                              {humanizeFlawName(flawLevel.name)}\n                            </option>\n                          );\n                        })}\n                  </select>\n                  <input\n                    type=\"search\"\n                    placeholder=\"Search expression (e.g. jsxref)\"\n                    value={row.search}\n                    onChange={(event) => {\n                      setSearchFlawsRows(\n                        searchFlawsRows.map((row, j) => {\n                          if (i === j) {\n                            row.search = event.target.value;\n                          }\n                          return row;\n                        })\n                      );\n                    }}\n                    onBlur={() => {\n                      const serialized = serializeSearchFlaws(searchFlawsRows);\n                      setFilters({ ...filters, search_flaws: serialized });\n                      refreshFilters();\n                    }}\n                  />\n                  <button\n                    type=\"button\"\n                    title=\"Remove search row\"\n                    onClick={() => {\n                      const clone = [...searchFlawsRows];\n                      clone.splice(i, 1);\n                      setSearchFlawsRows(clone);\n\n                      // const serialized = serializeSearchFlaws(searchFlawsRows);\n                      // setFilters({ ...filters, search_flaws: serialized });\n                      // refreshFilters()\n                    }}\n                  >\n                    -\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n          <button\n            type=\"button\"\n            title=\"Add search row\"\n            disabled={hasEmptySearchFlawsRow}\n            onClick={() => {\n              setSearchFlawsRows([\n                ...searchFlawsRows,\n                ...[\n                  {\n                    flaw: \"macros\",\n                    search: \"\",\n                  },\n                ],\n              ]);\n            }}\n          >\n            +\n          </button>\n        </div>\n\n        <div>\n          <h4>Fixable flaws</h4>\n          <input\n            type=\"search\"\n            placeholder=\"E.g. >0\"\n            value={filters.fixableFlaws || \"\"}\n            onChange={(event) => {\n              setFilters({ ...filters, fixableFlaws: event.target.value });\n            }}\n            onBlur={refreshFilters}\n          />\n        </div>\n\n        <div>\n          <h4>&nbsp;</h4>\n          <button type=\"submit\">Filter now</button>\n          {hasFilters && (\n            <button type=\"button\" onClick={resetFilters}>\n              Reset filters\n            </button>\n          )}\n        </div>\n      </form>\n    </div>\n  );\n}\n\nfunction equalObjects(obj1: object, obj2: object) {\n  const keys1 = new Set(Object.keys(obj1));\n  const keys2 = new Set(Object.keys(obj2));\n  if (keys1.size !== keys2.size) {\n    return false;\n  }\n  for (const key of keys1) {\n    if (!keys2.has(key)) {\n      return false;\n    }\n  }\n\n  return Object.entries(obj1).every(([key, value]) => {\n    const value2 = obj2[key];\n    if (typeof value !== typeof value2) {\n      return false;\n    }\n    if (Array.isArray(value)) {\n      return (\n        value.length === value2.length && value.every((v, i) => v === value2[i])\n      );\n    } else {\n      return value === value2;\n    }\n  });\n}\n\nfunction DocumentsTable({\n  locale,\n  counts,\n  documents,\n}: {\n  locale: string;\n  counts: Counts;\n  documents: Document[];\n}) {\n  const [filters, updateFiltersURL] = useFiltersURL();\n\n  function setSort(key: string): void {\n    updateFiltersURL(\n      filters.sort_by === key\n        ? { sort_reverse: !filters.sort_reverse }\n        : { sort_by: key }\n    );\n  }\n  // https://gist.github.com/jlbruno/1535691/db35b4f3af3dcbb42babc01541410f291a8e8fac\n  function getGetOrdinal(n: number) {\n    const s = [\"th\", \"st\", \"nd\", \"rd\"];\n    const v = n % 100;\n    return n.toLocaleString() + (s[(v - 20) % 10] || s[v] || s[0]);\n  }\n\n  function summarizeFlaws(flaws: DocumentFlaws[]) {\n    // Return a one-liner about all the flaws\n    const totalCountFixable = flaws.reduce(\n      (acc, flaw) => flaw.countFixable + acc,\n      0\n    );\n    const bits = flaws.map((flaw) => {\n      return `${humanizeFlawName(flaw.name)}: ${flaw.value}`;\n    });\n    return `${bits.join(\", \")} (${totalCountFixable} fixable)`;\n  }\n\n  function TH({ id, title }: { id: string; title: string }) {\n    return (\n      <th onClick={() => setSort(id)} className=\"sortable\">\n        {title}{\" \"}\n        {filters.sort_by === id ? (filters.sort_reverse ? \"🔽\" : \"🔼\") : null}\n      </th>\n    );\n  }\n\n  function getHighlightedText(text: string, highlight: string) {\n    // Split on highlight term and include term into parts, ignore case\n    const parts = text.split(new RegExp(`(${highlight})`, \"gi\"));\n    return (\n      <span>\n        {\" \"}\n        {parts.map((part, i) => (\n          <span\n            key={i}\n            style={\n              part.toLowerCase() === highlight.toLowerCase()\n                ? { fontWeight: \"bold\" }\n                : {}\n            }\n          >\n            {part}\n          </span>\n        ))}{\" \"}\n      </span>\n    );\n  }\n\n  function showBriefURL(uri: string) {\n    const [left, right] = uri.split(/\\/docs\\//, 2);\n    return (\n      <>\n        <span className=\"url-prefix\">{left}/docs/</span>\n        <span className=\"url-slug\">\n          {filters.mdn_url ? getHighlightedText(right, filters.mdn_url) : right}\n        </span>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"documents\">\n      <h3>\n        Documents with flaws found ({counts.found.toLocaleString()}){\" \"}\n        {filters.page > 1 && <span className=\"page\">page {filters.page}</span>}\n      </h3>\n      {!counts.built ? (\n        <WarnAboutNothingBuilt />\n      ) : (\n        <h4 className=\"subheader\">\n          {counts.built.toLocaleString()} documents built ({locale})\n        </h4>\n      )}\n\n      <table>\n        <thead>\n          <tr>\n            <TH id=\"mdn_url\" title=\"Document\" />\n            <TH id=\"popularity\" title=\"Popularity\" />\n            <TH id=\"flaws\" title=\"Flaws\" />\n          </tr>\n        </thead>\n        <tbody>\n          {documents.map((doc: Document) => {\n            return (\n              <tr key={doc.mdn_url}>\n                <td>\n                  <Link\n                    to={`${doc.mdn_url}#_flaws`}\n                    title={doc.title}\n                    target=\"_blank\"\n                  >\n                    {showBriefURL(doc.mdn_url)}\n                  </Link>\n                  <span className=\"document-title-preview\">\n                    {filters.title\n                      ? getHighlightedText(doc.title, filters.title)\n                      : doc.title}\n                  </span>\n                </td>\n                <td\n                  title={\n                    doc.popularity.ranking\n                      ? `Meaning there are ${\n                          doc.popularity.ranking - 1\n                        } more popular pages than this`\n                      : \"Meaning it has no ranking. Most likely a very rare (or new) document\"\n                  }\n                >\n                  {!doc.popularity.ranking\n                    ? \"n/a\"\n                    : `${getGetOrdinal(doc.popularity.ranking)}`}\n                </td>\n                <td>{summarizeFlaws(doc.flaws)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction PageLink({\n  number,\n  disabled,\n  children,\n}: {\n  number: number;\n  disabled?: boolean;\n  children: React.ReactNode;\n}) {\n  const [filters] = useFiltersURL();\n  // Unfortunately TS's Partial<T> is not quite the right return type of this function,\n  // as it implies the object could have keys set to undefined, which isn't true here.\n  // Hence we have to use type coercion (any)\n  const newFilters = withoutDefaultFilters({ ...filters, page: number }) as any;\n  if (newFilters.page) {\n    newFilters.page = String(newFilters.page);\n  }\n  return (\n    <Link\n      to={\"?\" + createSearchParams(newFilters).toString()}\n      className={disabled ? \"disabled\" : \"\"}\n      onClick={(event) => {\n        if (disabled) {\n          event.preventDefault();\n        }\n      }}\n    >\n      {children}\n    </Link>\n  );\n}\n\nfunction WarnAboutNothingBuilt() {\n  return (\n    <div className=\"attention document-warnings\">\n      <h4>No documents have been built, so no flaws can be found</h4>\n      <p>\n        At the moment, you have to use the command line tools to build documents\n        that we can analyze.\n      </p>\n    </div>\n  );\n}\n\nfunction AllFlawCounts({ counts }: { counts: FlawsCounts }) {\n  const typesSorted = Object.entries(counts.type).sort((a, b) => {\n    return a[1] - b[1];\n  });\n  const macrosSorted = Object.entries(counts.macros).sort((a, b) => {\n    return a[1] - b[1];\n  });\n  return (\n    <div className=\"flaw-counts\">\n      <h3>Flaws counts</h3>\n      <table>\n        <tbody>\n          <tr>\n            <td>Total</td>\n            <td>\n              <b>{counts.total.toLocaleString()}</b>\n            </td>\n          </tr>\n          <tr>\n            <td>Fixable</td>\n            <td>\n              <b>{counts.fixable.toLocaleString()}</b>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h4>Breakdown by type</h4>\n      <table>\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Count</th>\n          </tr>\n        </thead>\n        <tbody>\n          {typesSorted.map(([key, value]) => {\n            return (\n              <tr key={key}>\n                <td>{humanizeFlawName(key)}</td>\n                <td>\n                  <b>{value.toLocaleString()}</b>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <h4>\n        Breakdown by <code>macros</code> flaws\n      </h4>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Count</th>\n          </tr>\n        </thead>\n        <tbody>\n          {macrosSorted.map(([key, value]) => {\n            return (\n              <tr key={key}>\n                <td>\n                  <code>{key}</code>\n                </td>\n                <td>\n                  <b>{value.toLocaleString()}</b>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"],"names":["humanizeFlawName","name","bad_bcd_queries","bad_bcd_links","bad_pre_tags","unsafe_html","charAt","toUpperCase","slice","replace","defaultFilters","Object","freeze","mdn_url","title","popularity","fixableFlaws","flaws","page","sort_by","sort_reverse","search_flaws","withoutDefaultFilters","filters","fromEntries","entries","filter","key","value","JSON","stringify","useFiltersURL","useSearchParams","searchParams","setSearchParams","useMemo","params","searchParamsObject","reduce","acc","tuple","val","prototype","hasOwnProperty","call","Array","isArray","parseInt","updateFiltersURL","useCallback","partialFilters","newSearchParams","AllFlaws","useParams","locale","useState","lastData","setLastData","useEffect","counts","found","toLocaleString","document","getAPIUrl","restFilters","createSearchParams","String","sort","reverse","toString","useSWR","url","fetch","response","ok","Error","status","headers","get","includes","json","data","error","isValidating","loading","pageCount","pages","className","ShowSearchError","FilterControls","flawLevels","DocumentsTable","documents","PageLink","number","disabled","AllFlawCounts","BuildTimes","times","ms","built","toFixed","Math","trunc","initialFilters","setFilters","list","rows","split","flaw","search","push","deserializeSearchFlaws","searchFlawsRows","setSearchFlawsRows","refreshFilters","searchInputs","querySelectorAll","input","length","focus","hasFilters","obj1","obj2","keys1","Set","keys","keys2","size","has","every","value2","v","i","equalObjects","hasEmptySearchFlawsRow","some","row","trim","onSubmit","event","preventDefault","type","placeholder","onChange","target","onBlur","multiple","selectedOptions","map","opt","flawLevel","ignored","clone","j","serialized","onClick","splice","getGetOrdinal","n","s","summarizeFlaws","totalCountFixable","countFixable","bits","join","TH","id","getHighlightedText","text","highlight","parts","RegExp","part","style","toLowerCase","fontWeight","showBriefURL","uri","left","right","WarnAboutNothingBuilt","doc","to","ranking","children","newFilters","typesSorted","a","b","macrosSorted","macros","total","fixable"],"sourceRoot":""}